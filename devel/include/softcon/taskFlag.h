// Generated by gencpp from file softcon/taskFlag.msg
// DO NOT EDIT!


#ifndef SOFTCON_MESSAGE_TASKFLAG_H
#define SOFTCON_MESSAGE_TASKFLAG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace softcon
{
template <class ContainerAllocator>
struct taskFlag_
{
  typedef taskFlag_<ContainerAllocator> Type;

  taskFlag_()
    : offset(0)
    , yaw_change(0)
    , depth_change(0)
    , speed_change(0)  {
    }
  taskFlag_(const ContainerAllocator& _alloc)
    : offset(0)
    , yaw_change(0)
    , depth_change(0)
    , speed_change(0)  {
  (void)_alloc;
    }



   typedef int8_t _offset_type;
  _offset_type offset;

   typedef int8_t _yaw_change_type;
  _yaw_change_type yaw_change;

   typedef int8_t _depth_change_type;
  _depth_change_type depth_change;

   typedef int8_t _speed_change_type;
  _speed_change_type speed_change;





  typedef boost::shared_ptr< ::softcon::taskFlag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::softcon::taskFlag_<ContainerAllocator> const> ConstPtr;

}; // struct taskFlag_

typedef ::softcon::taskFlag_<std::allocator<void> > taskFlag;

typedef boost::shared_ptr< ::softcon::taskFlag > taskFlagPtr;
typedef boost::shared_ptr< ::softcon::taskFlag const> taskFlagConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::softcon::taskFlag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::softcon::taskFlag_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace softcon

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'softcon': ['/home/kartikay/Desktop/old-stack/oldstack/src/softcon/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::softcon::taskFlag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::softcon::taskFlag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::softcon::taskFlag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::softcon::taskFlag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::softcon::taskFlag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::softcon::taskFlag_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::softcon::taskFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c2109de6632485726fc1bd87c14c6022";
  }

  static const char* value(const ::softcon::taskFlag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc2109de663248572ULL;
  static const uint64_t static_value2 = 0x6fc1bd87c14c6022ULL;
};

template<class ContainerAllocator>
struct DataType< ::softcon::taskFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "softcon/taskFlag";
  }

  static const char* value(const ::softcon::taskFlag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::softcon::taskFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 offset\n\
int8 yaw_change\n\
int8 depth_change\n\
int8 speed_change\n\
";
  }

  static const char* value(const ::softcon::taskFlag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::softcon::taskFlag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.offset);
      stream.next(m.yaw_change);
      stream.next(m.depth_change);
      stream.next(m.speed_change);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct taskFlag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::softcon::taskFlag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::softcon::taskFlag_<ContainerAllocator>& v)
  {
    s << indent << "offset: ";
    Printer<int8_t>::stream(s, indent + "  ", v.offset);
    s << indent << "yaw_change: ";
    Printer<int8_t>::stream(s, indent + "  ", v.yaw_change);
    s << indent << "depth_change: ";
    Printer<int8_t>::stream(s, indent + "  ", v.depth_change);
    s << indent << "speed_change: ";
    Printer<int8_t>::stream(s, indent + "  ", v.speed_change);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOFTCON_MESSAGE_TASKFLAG_H
