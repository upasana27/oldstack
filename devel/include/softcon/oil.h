// Generated by gencpp from file softcon/oil.msg
// DO NOT EDIT!


#ifndef SOFTCON_MESSAGE_OIL_H
#define SOFTCON_MESSAGE_OIL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace softcon
{
template <class ContainerAllocator>
struct oil_
{
  typedef oil_<ContainerAllocator> Type;

  oil_()
    : speed(0.0)
    , depth(0.0)
    , xcor(0.0)  {
    }
  oil_(const ContainerAllocator& _alloc)
    : speed(0.0)
    , depth(0.0)
    , xcor(0.0)  {
  (void)_alloc;
    }



   typedef double _speed_type;
  _speed_type speed;

   typedef double _depth_type;
  _depth_type depth;

   typedef double _xcor_type;
  _xcor_type xcor;





  typedef boost::shared_ptr< ::softcon::oil_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::softcon::oil_<ContainerAllocator> const> ConstPtr;

}; // struct oil_

typedef ::softcon::oil_<std::allocator<void> > oil;

typedef boost::shared_ptr< ::softcon::oil > oilPtr;
typedef boost::shared_ptr< ::softcon::oil const> oilConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::softcon::oil_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::softcon::oil_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace softcon

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'softcon': ['/home/kartikay/Desktop/old-stack/oldstack/src/softcon/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::softcon::oil_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::softcon::oil_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::softcon::oil_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::softcon::oil_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::softcon::oil_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::softcon::oil_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::softcon::oil_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8332a188e73baeefa89bb486ea01ecd3";
  }

  static const char* value(const ::softcon::oil_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8332a188e73baeefULL;
  static const uint64_t static_value2 = 0xa89bb486ea01ecd3ULL;
};

template<class ContainerAllocator>
struct DataType< ::softcon::oil_<ContainerAllocator> >
{
  static const char* value()
  {
    return "softcon/oil";
  }

  static const char* value(const ::softcon::oil_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::softcon::oil_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 speed\n\
float64 depth\n\
float64 xcor\n\
";
  }

  static const char* value(const ::softcon::oil_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::softcon::oil_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.depth);
      stream.next(m.xcor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct oil_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::softcon::oil_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::softcon::oil_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "depth: ";
    Printer<double>::stream(s, indent + "  ", v.depth);
    s << indent << "xcor: ";
    Printer<double>::stream(s, indent + "  ", v.xcor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOFTCON_MESSAGE_OIL_H
