// Generated by gencpp from file navcon/tval.msg
// DO NOT EDIT!


#ifndef NAVCON_MESSAGE_TVAL_H
#define NAVCON_MESSAGE_TVAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace navcon
{
template <class ContainerAllocator>
struct tval_
{
  typedef tval_<ContainerAllocator> Type;

  tval_()
    : depthright(0)
    , depthleft(0)
    , offyawfront(0)
    , offyawback(0)
    , speedleft(0)
    , speedright(0)  {
    }
  tval_(const ContainerAllocator& _alloc)
    : depthright(0)
    , depthleft(0)
    , offyawfront(0)
    , offyawback(0)
    , speedleft(0)
    , speedright(0)  {
  (void)_alloc;
    }



   typedef int16_t _depthright_type;
  _depthright_type depthright;

   typedef int16_t _depthleft_type;
  _depthleft_type depthleft;

   typedef int16_t _offyawfront_type;
  _offyawfront_type offyawfront;

   typedef int16_t _offyawback_type;
  _offyawback_type offyawback;

   typedef int16_t _speedleft_type;
  _speedleft_type speedleft;

   typedef int16_t _speedright_type;
  _speedright_type speedright;





  typedef boost::shared_ptr< ::navcon::tval_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navcon::tval_<ContainerAllocator> const> ConstPtr;

}; // struct tval_

typedef ::navcon::tval_<std::allocator<void> > tval;

typedef boost::shared_ptr< ::navcon::tval > tvalPtr;
typedef boost::shared_ptr< ::navcon::tval const> tvalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navcon::tval_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navcon::tval_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace navcon

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'navcon': ['/home/kartikay/Desktop/old-stack/oldstack/src/navcon/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::navcon::tval_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navcon::tval_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navcon::tval_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navcon::tval_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navcon::tval_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navcon::tval_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navcon::tval_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dda295200907eed02efd0f3614e26ed4";
  }

  static const char* value(const ::navcon::tval_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdda295200907eed0ULL;
  static const uint64_t static_value2 = 0x2efd0f3614e26ed4ULL;
};

template<class ContainerAllocator>
struct DataType< ::navcon::tval_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navcon/tval";
  }

  static const char* value(const ::navcon::tval_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navcon::tval_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 depthright\n\
int16 depthleft\n\
int16 offyawfront\n\
int16 offyawback\n\
int16 speedleft\n\
int16 speedright\n\
\n\
";
  }

  static const char* value(const ::navcon::tval_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navcon::tval_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.depthright);
      stream.next(m.depthleft);
      stream.next(m.offyawfront);
      stream.next(m.offyawback);
      stream.next(m.speedleft);
      stream.next(m.speedright);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tval_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navcon::tval_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navcon::tval_<ContainerAllocator>& v)
  {
    s << indent << "depthright: ";
    Printer<int16_t>::stream(s, indent + "  ", v.depthright);
    s << indent << "depthleft: ";
    Printer<int16_t>::stream(s, indent + "  ", v.depthleft);
    s << indent << "offyawfront: ";
    Printer<int16_t>::stream(s, indent + "  ", v.offyawfront);
    s << indent << "offyawback: ";
    Printer<int16_t>::stream(s, indent + "  ", v.offyawback);
    s << indent << "speedleft: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speedleft);
    s << indent << "speedright: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speedright);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVCON_MESSAGE_TVAL_H
