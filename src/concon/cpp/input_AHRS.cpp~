//Ros libs
#include <ros/ros.h>

//General Libs
#include <iostream>
#include <std_msgs/Float64.h>
#include <stdlib.h>
//#include <fstream>

// Include this header file to get access to the EzAsyncData class.
#include "vn/ezasyncdata.h"

// We need this file for our sleep function.
#include "vn/thread.h"

using namespace std;
using namespace vn::math;
using namespace vn::sensors;
using namespace vn::protocol::uart;
using namespace vn::xplat;

vn::math::vec3 conv ;	//Variable to breakdown YPR values to individual float64 msgs
std_msgs::Float64 tras1 ;
std_msgs::Float64 tras2 ;

int main(int argc, char *argv[])
{
	 //ofstream outfile;
	 //outfile.open("afile.csv");

	ros::init(argc, argv, "publish_velocity");
  	ros::NodeHandle nh;

	ros::Publisher pub1 = nh.advertise<std_msgs::Float64>("bosscon/stateSpecs/yaw", 1000);
	ros::Publisher pub2 = nh.advertise<std_msgs::Float64>("bosscon/stateSpecs/pitch", 1000);
	ros::Rate rate(100) ;
	
	const string SensorPort = "/dev/ttyUSB0";         // Linux format for virtual (USB) serial port.
	const uint32_t SensorBaudrate = 115200;

	// We create and connect to a sensor by the call below.
	EzAsyncData* ez = EzAsyncData::connect(SensorPort, SensorBaudrate);
	
	while(ros::ok())
	{ 	
		CompositeData cd = ez->getNextData();
		if (!cd.hasYawPitchRoll())
			cout << "YPR Unavailable." << endl;
		else
		{	
			conv = cd.yawPitchRoll() ;
			tras1.data = conv[0] ;	//yaw
			tras2.data = conv[1] ; 	//pitch
		}
		pub1.publish(tras1);		//yaw
		pub2.publish(tras2);		//pitch
		rate.sleep() ;
	}

	
	ez->disconnect() ;
	//outfile.close() ;

	delete ez;

	return 0;
}
